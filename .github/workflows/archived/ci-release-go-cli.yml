name: Build, Generate Metrics and Test Go CLIs with go-releaser
on: 
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string

permissions:
  contents: write

env:
  APPLICATION_NAME: ${{ inputs.application-name }}
  API_VERSION: ${{ github.ref_name }}
  BUILDTYPE: 'CLI'
  SCCOUTPUTFILE: 'scc.out'
  BUILDLANGUAGE: 'GoLang'
  DOCKERFILE_PATH: './Dockerfile'

jobs:
  # Build GoLang binaries per .goreleaser.yaml with go-releaser makes these artifacts in GitHub 
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.21'
      - run: go version
    #   - name: Configure git for private modules linux
    #     if: ${{ matrix.os == 'ubuntu-latest' }}
    #     env:
    #       GOPRIVATE: github.com/progress-platform-services/*
    #     run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Unit Test and Sonar (SCA and unit test coverage)
  unit-test:
    name: 'Unit test and run Sonar scan'
    runs-on: ubuntu-latest-4-cores
    needs: goreleaser
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 'Unit Test: Generate coverage.out and covreport.xml file'
      run: go test -v -coverprofile="coverage.out" ./... 
    - name: Copy file
      run: cp coverage.out test/unittest/coverage.out
      #    - name: cat the file
      #      run: cat test/unittest/coverage.out
    
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@master
    #   # https://github.com/marketplace/actions/official-sonarqube-scan
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
    - name: Upload test coverage artifact
      uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        name: test-coverage.out
        # A file, directory or wildcard pattern that describes what to upload
        path: test/unittest/coverage.out
 
  # Veracode srcclr SCA
    # https://github.com/veracode/example-github-actions
    # https://github.com/marketplace/actions/veracode-dependency-scanning
    # https://github.com/srcclr/efda/tree/master/golang
    # https://community.veracode.com/s/question/0D53n000087StKRCA0/how-do-i-get-a-sourceclear-api-token-i-am-not-seeing-anywhere-within-the-platform-that-gives-me-an-option-to-generate-one
    # https://docs.veracode.com/r/Integrate_Veracode_SCA_Agent_Based_Scanning_with_Your_CI_Projects
    # https://github.com/veracode/example-go-modules
    # https://github.com/veracode/github-actions-integration 
    # https://docs.veracode.com/r/t_sc_cli_agent
    # https://docs.veracode.com/r/Veracode_SCA_Agent_Commands
    # https://docs.veracode.com/r/c_video_scan_with_agent_based_scan
  srcclr:
    runs-on: ubuntu-latest
    needs: unit-test
    name: 'srcclr SCA'
    steps:
      - name: 'srcclr SCA'
        run: echo 'hello world'

  # Veracode SAST (needs binary)
    # https://github.com/marketplace/actions/veracode-upload-and-scan
    # https://github.com/marketplace/actions/veracode-pipeline-scan
    # https://docs.veracode.com/r/Install_the_Veracode_CLI
    # https://docs.veracode.com/r/Generating_a_Software_Bill_of_Materials_SBOM_for_Upload_Scans#:~:text=You%20can%20use%20the%20Veracode,CycloneDX%20JSON%20or%20SPDX%20format.
  veracode-sast:
    runs-on: ubuntu-latest
    needs: srcclr
    name: 'Veracode SAST'
    steps:
      - name: 'Veracode SAST'
        run: echo 'hello world'

  # Language vulnerability checks (SCA) - OWASP depcheck, gosec
    # depcheck - https://jeremylong.github.io/DependencyCheck/dependency-check-cli/index.html, https://jeremylong.github.io/DependencyCheck/ (plugin to SQ)
    # https://github.com/marketplace/actions/gosec-security-checker
    # https://go.googlesource.com/vuln - govulncheck
  language-vuln-checks:
    runs-on: ubuntu-latest
    needs: veracode-sast
    name: 'OWASP depcheck and gosec'
    steps:
      - name: 'OWASP depcheck and gosec'
        run: echo 'hello world'

  # Code signing (can generate MD5 SHA, but also need signature - not GPG but provisioned by Progress EVCode)
    # https://github.com/mtrojnar/osslsigncode?tab=readme-ov-file 
  code-signing:
    runs-on: ubuntu-latest
    needs: language-vuln-checks
    name: 'Code signing'
    steps:
      - name: 'Code signing'
        run: echo 'hello world'

  # Generate SPDX source & deps SBOM
    # CycloneDX, then sbomqualityscore (https://github.com/interlynk-io/sbomqs) - https://github.com/marketplace/actions/cyclonedx-gomod-generate-sbom
        # CLI combines SBOMs https://github.com/CycloneDX/cyclonedx-cli , docs at https://cyclonedx.org/capabilities/sbom/
        # https://github.com/ozonru/cyclonedx-go
    # MSFT SBOM, then sbomqualityscore (https://github.com/interlynk-io/sbomqs) - https://github.com/microsoft/sbom-tool/blob/main/docs/setting-up-github-actions.md 
    # Grype - https://github.com/marketplace/actions/anchore-container-scan, https://github.com/anchore/grype
    # open Spdx-sbom-generator - https://github.com/opensbom-generator/spdx-sbom-generator 
    # https://github.com/srcclr/srcclr_sbom_gen 
    # https://github.com/openclarity/kubeclarity?tab=readme-ov-file#installation 
  generate-basic-sbom:
    runs-on: ubuntu-latest
    needs: code-signing
    name: 'Generate basic SBOM'
    steps:
      - name: 'Generate basic SBOM'
        run: echo 'hello world'

  # Publish OpenAPI specs (for docs)
    # to https://github.com/progress-platform-services/open-api-specifications/tree/main/chef
  open-api-update:
    runs-on: ubuntu-latest
    needs: unit-test
    name: 'Publish OpenAPI Specs'
    steps:
      - name: 'Publish OpenAPI Specs'
        run: echo 'hello world'

  # Documentation generation 
  documentation-generation:
    runs-on: ubuntu-latest
    needs: open-api-update
    name: 'Generate documentation'
    steps:
      - name: 'Generate documentation'
        run: echo 'hello world'

  # Complexity Metrics
  # refer to https://github.com/marketplace/actions/scc-docker-action
  scc:
    runs-on: ubuntu-latest
    needs: unit-test
    name: 'Complexity and SLOC'
    # (after - name:) if: ${{ env.BUILDLANGUAGE == 'Go' }}
    # run: scc -i js,go,html,css -w -o ${{ env.SCCOUTPUTFILE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate complexity metrics (Adapt-API)
        id: scc
        uses: Adapt-API/scc-docker-action@master
        with:
          args: -i js,go,html,css
          # ${{ env.workspace }}
      - name: Echo scc output file
        run: echo -n "${{ steps.scc.outputs.scc }}" >> ${{ env.SCCOUTPUTFILE }}
        #   echo -n "${{ fromJson(steps.scc.outputs.scc)[0].Code }}"
      # - name: cat SCC output
      #   run: cat ${{ env.SCCOUTPUTFILE }}
      - name: Upload SCC artifacts
        uses: actions/upload-artifact@v4
        with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
          name: ${{ env.SCCOUTPUTFILE }}
        # A file, directory or wildcard pattern that describes what to upload
          path: ${{ env.SCCOUTPUTFILE }}
        # Optional. Default is 'warn'
          if-no-files-found: ignore
          retention-days: 30
          overwrite: true
