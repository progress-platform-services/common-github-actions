# dispatch action to create inputs to the SBOM and NOTICES.TXT files,
# dependencies used, versions of those dependencies, applicable license, original license text
name: Run msft-sbom and license_scout (dispatch)

on:
  push:
    branches:
      - main
        
  workflow_dispatch:

jobs:
  build-generate-SBOM:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.1
    - name: Configure git for private modules
      env:
        GOPRIVATE: github.com/progress-platform-services/*
      run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"

    - name: create folder
      run: |
        mkdir ./bin
    # per https://github.com/microsoft/sbom-tool/blob/main/docs/setting-up-github-actions.md 
    - name: Generate SBOM
      run: |
        curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x $RUNNER_TEMP/sbom-tool
        $RUNNER_TEMP/sbom-tool generate -b ./bin -bc . -pn chef-360 -pv 1.0.0 -ps "Progress Chef" -nsb https://https://www.progress.com/ -V Verbose
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ github.event.repository.name }}-manifest.spdx.json
        path: ./bin/_manifest/spdx_2.2/manifest.spdx.json

  license_scout:
    # Usage: C:/Ruby32-x64/bin/license_scout (options)
    # -c, --config-files CONFIG_FILES  Comma-separated list of local (or remote) YAML configuration file(s) evaluated in order specified (priority goes to last file)
    # -d, --directories DIRECTORIES    Comma-separated list of directories to scan
    #     --format FORMAT              When exporting a Dependency Manifest, export to this format (valid options: 'csv')
    #     --include-sub-directories    Include all sub-directories of 'directories' in the analysis
    # -l, --log-level LEVEL            Set the log level (valid options: 'debug', 'info', 'warn', 'error', or 'fatal')
    #     --only-show-failures         Only print results for dependencies with licenses that failed checks  
    # -h, --help                       Show this message
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1
      - name: Configure git for private modules
        env:
          GOPRIVATE: github.com/progress-platform-services/*
        run: git config --global url."https://${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: set up license_scout
        uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1
        with:
            ruby-version: '3.1'
      - name: install license_scout
        run: |
          gem install license_scout
          mkdir -p ./bin/license-scout
    #      ls .
    #     cannot use unverified actions like andstor/file-existence-action@v3
      - name: generate license_scout with fallback
        if: ${{ hashFiles('./.license_scout.yml') != '' }}    
        run: |
          license_scout -l debug --format 'csv' -c ./.license_scout.yml > ./bin/license-scout/license-scout.txt 2>&1
#license_scout -l info --format csv > ./bin/license-scout/license-scout.txt       
      - name: generate license_scout without fallback file
        if: ${{ hashFiles('./.license_scout.yml') == '' }}
        run: |
          license_scout > ./bin/license-scout/license-scout.txt 
      - name: Upload a Build Artifact
        if: always()
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ github.event.repository.name }}-license-scout.txt
          path: ./bin/license-scout/license-scout.txt

# Generate SPDX source & deps SBOM
  # CycloneDX, then sbomqualityscore (https://github.com/interlynk-io/sbomqs) - https://github.com/marketplace/actions/cyclonedx-gomod-generate-sbom
      # CLI combines SBOMs https://github.com/CycloneDX/cyclonedx-cli , docs at https://cyclonedx.org/capabilities/sbom/
      # https://github.com/ozonru/cyclonedx-go
  # MSFT SBOM, then sbomqualityscore (https://github.com/interlynk-io/sbomqs) - https://github.com/microsoft/sbom-tool/blob/main/docs/setting-up-github-actions.md 
  # Grype - https://github.com/marketplace/actions/anchore-container-scan, https://github.com/anchore/grype
  # open Spdx-sbom-generator - https://github.com/opensbom-generator/spdx-sbom-generator 
  # https://github.com/srcclr/srcclr_sbom_gen 
  # https://github.com/openclarity/kubeclarity?tab=readme-ov-file#installation 
#   generate-basic-sbom:
#     runs-on: ubuntu-latest
#     needs: code-signing
#     name: 'Generate basic SBOM'
#     steps:
#       - name: 'Generate basic SBOM'
#         run: echo 'hello world'